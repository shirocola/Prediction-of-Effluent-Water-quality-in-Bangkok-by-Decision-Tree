# -*- coding: utf-8 -*-
"""Water_quality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BiXklCjBJMv9bE6NCDRooIwEajDzRjgM

##Data Collection
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/water_quality_bkk.csv")

"""## EDA"""

df.shape

x = df.drop(['Water_Control_Plant', 'Month'], axis=1)

x.isnull().sum()

x.info()

x.describe()

df.fillna(df.mean(), inplace=True)
df.isnull().sum()

df.Pass.value_counts()

sns.countplot(df['Pass'])
plt.show()

sns.displot(df['BOD'])
plt.show()

df.hist(figsize=(14,14))
plt.show()

plt.figure(figsize=(13,8))
sns.heatmap(df.corr(),annot=True,cmap= 'terrain')
plt.show()

df.boxplot(figsize=(14, 7))

X= df.drop(['Pass', 'Water_Control_Plant',	'Month'], axis=1)
Y=df['Pass']

X.head()

from sklearn.model_selection import  train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=101, shuffle=True)
X_train.info()
Y_train.head()

"""## Train Decision tree Classifier"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
dt=DecisionTreeClassifier(criterion= 'gini', min_samples_split= 10, splitter= 'best')
dt.fit(X_train,Y_train)

prediction=dt.predict(X_test)
print(f"Accuracy Score = {accuracy_score(Y_test, prediction)*100}")
print(f"Confusion Matrix =\n {confusion_matrix(Y_test, prediction)}")
print(f"Classification Report =\n {classification_report(Y_test, prediction)}")

res =dt.predict([[20, 20, 8.5, 4, 2 ,4]])[0]
res

"""## Apply Hyper Parameter Tuning"""

from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import GridSearchCV

# define models and parameters
model = DecisionTreeClassifier()
criterion = ["gini", "entropy"]
splitter = ["best", "random"]
min_samples_split = [2,4,6,8,10,12,14]

# define grid search
grid = dict(splitter=splitter, criterion=criterion,  min_samples_split=min_samples_split)
cv = RepeatedStratifiedKFold(n_splits=2, n_repeats=3 ,random_state=1)
grid_search_dt = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv,
                              scoring='accuracy', error_score=0)
grid_search_dt.fit(X_train, Y_train)

print(f"Best: {grid_search_dt.best_score_:.3f} using {grid_search_dt.best_params_}")
means = grid_search_dt.cv_results_['mean_test_score']
stds = grid_search_dt.cv_results_['std_test_score']
params = grid_search_dt.cv_results_['params']

for mean, stdev, param in zip(means, stds, params):
    print(f"{mean:.3f} ({stdev:.3f}) with: {param}")
    
print("Training Score:",grid_search_dt.score(X_train, Y_train)*100)
print("Testing Score:", grid_search_dt.score(X_test, Y_test)*100)